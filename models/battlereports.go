// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Battlereport is an object representing the database table.
type Battlereport struct {
	ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID       null.String `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	UserFaction  null.String `boil:"user_faction" json:"user_faction,omitempty" toml:"user_faction" yaml:"user_faction,omitempty"`
	ListID       null.Int    `boil:"list_id" json:"list_id,omitempty" toml:"list_id" yaml:"list_id,omitempty"`
	EnemyFaction null.String `boil:"enemy_faction" json:"enemy_faction,omitempty" toml:"enemy_faction" yaml:"enemy_faction,omitempty"`
	EnemyList    null.String `boil:"enemy_list" json:"enemy_list,omitempty" toml:"enemy_list" yaml:"enemy_list,omitempty"`
	GameMode     null.Int    `boil:"game_mode" json:"game_mode,omitempty" toml:"game_mode" yaml:"game_mode,omitempty"`
	Win          null.Bool   `boil:"win" json:"win,omitempty" toml:"win" yaml:"win,omitempty"`
	PlayerScore  null.Int    `boil:"player_score" json:"player_score,omitempty" toml:"player_score" yaml:"player_score,omitempty"`
	EnemyScore   null.Int    `boil:"enemy_score" json:"enemy_score,omitempty" toml:"enemy_score" yaml:"enemy_score,omitempty"`
	CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *battlereportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L battlereportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattlereportColumns = struct {
	ID           string
	UserID       string
	UserFaction  string
	ListID       string
	EnemyFaction string
	EnemyList    string
	GameMode     string
	Win          string
	PlayerScore  string
	EnemyScore   string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	UserID:       "user_id",
	UserFaction:  "user_faction",
	ListID:       "list_id",
	EnemyFaction: "enemy_faction",
	EnemyList:    "enemy_list",
	GameMode:     "game_mode",
	Win:          "win",
	PlayerScore:  "player_score",
	EnemyScore:   "enemy_score",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BattlereportWhere = struct {
	ID           whereHelperint
	UserID       whereHelpernull_String
	UserFaction  whereHelpernull_String
	ListID       whereHelpernull_Int
	EnemyFaction whereHelpernull_String
	EnemyList    whereHelpernull_String
	GameMode     whereHelpernull_Int
	Win          whereHelpernull_Bool
	PlayerScore  whereHelpernull_Int
	EnemyScore   whereHelpernull_Int
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint{field: `id`},
	UserID:       whereHelpernull_String{field: `user_id`},
	UserFaction:  whereHelpernull_String{field: `user_faction`},
	ListID:       whereHelpernull_Int{field: `list_id`},
	EnemyFaction: whereHelpernull_String{field: `enemy_faction`},
	EnemyList:    whereHelpernull_String{field: `enemy_list`},
	GameMode:     whereHelpernull_Int{field: `game_mode`},
	Win:          whereHelpernull_Bool{field: `win`},
	PlayerScore:  whereHelpernull_Int{field: `player_score`},
	EnemyScore:   whereHelpernull_Int{field: `enemy_score`},
	CreatedAt:    whereHelpertime_Time{field: `created_at`},
	UpdatedAt:    whereHelpertime_Time{field: `updated_at`},
}

// BattlereportRels is where relationship names are stored.
var BattlereportRels = struct {
	List string
}{
	List: "List",
}

// battlereportR is where relationships are stored.
type battlereportR struct {
	List *ArmyList
}

// NewStruct creates a new relationship struct
func (*battlereportR) NewStruct() *battlereportR {
	return &battlereportR{}
}

// battlereportL is where Load methods for each relationship are stored.
type battlereportL struct{}

var (
	battlereportColumns               = []string{"id", "user_id", "user_faction", "list_id", "enemy_faction", "enemy_list", "game_mode", "win", "player_score", "enemy_score", "created_at", "updated_at"}
	battlereportColumnsWithoutDefault = []string{"user_id", "user_faction", "list_id", "enemy_faction", "enemy_list", "game_mode", "win", "player_score", "enemy_score", "created_at", "updated_at"}
	battlereportColumnsWithDefault    = []string{"id"}
	battlereportPrimaryKeyColumns     = []string{"id"}
)

type (
	// BattlereportSlice is an alias for a slice of pointers to Battlereport.
	// This should generally be used opposed to []Battlereport.
	BattlereportSlice []*Battlereport
	// BattlereportHook is the signature for custom Battlereport hook methods
	BattlereportHook func(context.Context, boil.ContextExecutor, *Battlereport) error

	battlereportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battlereportType                 = reflect.TypeOf(&Battlereport{})
	battlereportMapping              = queries.MakeStructMapping(battlereportType)
	battlereportPrimaryKeyMapping, _ = queries.BindMapping(battlereportType, battlereportMapping, battlereportPrimaryKeyColumns)
	battlereportInsertCacheMut       sync.RWMutex
	battlereportInsertCache          = make(map[string]insertCache)
	battlereportUpdateCacheMut       sync.RWMutex
	battlereportUpdateCache          = make(map[string]updateCache)
	battlereportUpsertCacheMut       sync.RWMutex
	battlereportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battlereportBeforeInsertHooks []BattlereportHook
var battlereportBeforeUpdateHooks []BattlereportHook
var battlereportBeforeDeleteHooks []BattlereportHook
var battlereportBeforeUpsertHooks []BattlereportHook

var battlereportAfterInsertHooks []BattlereportHook
var battlereportAfterSelectHooks []BattlereportHook
var battlereportAfterUpdateHooks []BattlereportHook
var battlereportAfterDeleteHooks []BattlereportHook
var battlereportAfterUpsertHooks []BattlereportHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Battlereport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range battlereportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Battlereport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range battlereportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Battlereport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range battlereportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Battlereport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range battlereportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Battlereport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range battlereportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Battlereport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range battlereportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Battlereport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range battlereportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Battlereport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range battlereportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Battlereport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range battlereportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattlereportHook registers your hook function for all future operations.
func AddBattlereportHook(hookPoint boil.HookPoint, battlereportHook BattlereportHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		battlereportBeforeInsertHooks = append(battlereportBeforeInsertHooks, battlereportHook)
	case boil.BeforeUpdateHook:
		battlereportBeforeUpdateHooks = append(battlereportBeforeUpdateHooks, battlereportHook)
	case boil.BeforeDeleteHook:
		battlereportBeforeDeleteHooks = append(battlereportBeforeDeleteHooks, battlereportHook)
	case boil.BeforeUpsertHook:
		battlereportBeforeUpsertHooks = append(battlereportBeforeUpsertHooks, battlereportHook)
	case boil.AfterInsertHook:
		battlereportAfterInsertHooks = append(battlereportAfterInsertHooks, battlereportHook)
	case boil.AfterSelectHook:
		battlereportAfterSelectHooks = append(battlereportAfterSelectHooks, battlereportHook)
	case boil.AfterUpdateHook:
		battlereportAfterUpdateHooks = append(battlereportAfterUpdateHooks, battlereportHook)
	case boil.AfterDeleteHook:
		battlereportAfterDeleteHooks = append(battlereportAfterDeleteHooks, battlereportHook)
	case boil.AfterUpsertHook:
		battlereportAfterUpsertHooks = append(battlereportAfterUpsertHooks, battlereportHook)
	}
}

// One returns a single battlereport record from the query.
func (q battlereportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Battlereport, error) {
	o := &Battlereport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for battlereports")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Battlereport records from the query.
func (q battlereportQuery) All(ctx context.Context, exec boil.ContextExecutor) (BattlereportSlice, error) {
	var o []*Battlereport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Battlereport slice")
	}

	if len(battlereportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Battlereport records in the query.
func (q battlereportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count battlereports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battlereportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if battlereports exists")
	}

	return count > 0, nil
}

// List pointed to by the foreign key.
func (o *Battlereport) List(mods ...qm.QueryMod) armyListQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ListID),
	}

	queryMods = append(queryMods, mods...)

	query := ArmyLists(queryMods...)
	queries.SetFrom(query.Query, "\"army_lists\"")

	return query
}

// LoadList allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battlereportL) LoadList(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBattlereport interface{}, mods queries.Applicator) error {
	var slice []*Battlereport
	var object *Battlereport

	if singular {
		object = maybeBattlereport.(*Battlereport)
	} else {
		slice = *maybeBattlereport.(*[]*Battlereport)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battlereportR{}
		}
		if !queries.IsNil(object.ListID) {
			args = append(args, object.ListID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battlereportR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ListID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ListID) {
				args = append(args, obj.ListID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`army_lists`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ArmyList")
	}

	var resultSlice []*ArmyList
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ArmyList")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for army_lists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for army_lists")
	}

	if len(battlereportAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.List = foreign
		if foreign.R == nil {
			foreign.R = &armyListR{}
		}
		foreign.R.ListBattlereports = append(foreign.R.ListBattlereports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ListID, foreign.ID) {
				local.R.List = foreign
				if foreign.R == nil {
					foreign.R = &armyListR{}
				}
				foreign.R.ListBattlereports = append(foreign.R.ListBattlereports, local)
				break
			}
		}
	}

	return nil
}

// SetList of the battlereport to the related item.
// Sets o.R.List to related.
// Adds o to related.R.ListBattlereports.
func (o *Battlereport) SetList(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ArmyList) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battlereports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"list_id"}),
		strmangle.WhereClause("\"", "\"", 2, battlereportPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ListID, related.ID)
	if o.R == nil {
		o.R = &battlereportR{
			List: related,
		}
	} else {
		o.R.List = related
	}

	if related.R == nil {
		related.R = &armyListR{
			ListBattlereports: BattlereportSlice{o},
		}
	} else {
		related.R.ListBattlereports = append(related.R.ListBattlereports, o)
	}

	return nil
}

// RemoveList relationship.
// Sets o.R.List to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Battlereport) RemoveList(ctx context.Context, exec boil.ContextExecutor, related *ArmyList) error {
	var err error

	queries.SetScanner(&o.ListID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("list_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.List = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ListBattlereports {
		if queries.Equal(o.ListID, ri.ListID) {
			continue
		}

		ln := len(related.R.ListBattlereports)
		if ln > 1 && i < ln-1 {
			related.R.ListBattlereports[i] = related.R.ListBattlereports[ln-1]
		}
		related.R.ListBattlereports = related.R.ListBattlereports[:ln-1]
		break
	}
	return nil
}

// Battlereports retrieves all the records using an executor.
func Battlereports(mods ...qm.QueryMod) battlereportQuery {
	mods = append(mods, qm.From("\"battlereports\""))
	return battlereportQuery{NewQuery(mods...)}
}

// FindBattlereport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattlereport(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Battlereport, error) {
	battlereportObj := &Battlereport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battlereports\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, battlereportObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from battlereports")
	}

	return battlereportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Battlereport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no battlereports provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battlereportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battlereportInsertCacheMut.RLock()
	cache, cached := battlereportInsertCache[key]
	battlereportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battlereportColumns,
			battlereportColumnsWithDefault,
			battlereportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battlereportType, battlereportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battlereportType, battlereportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battlereports\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battlereports\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into battlereports")
	}

	if !cached {
		battlereportInsertCacheMut.Lock()
		battlereportInsertCache[key] = cache
		battlereportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Battlereport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Battlereport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battlereportUpdateCacheMut.RLock()
	cache, cached := battlereportUpdateCache[key]
	battlereportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battlereportColumns,
			battlereportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update battlereports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battlereports\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battlereportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battlereportType, battlereportMapping, append(wl, battlereportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update battlereports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for battlereports")
	}

	if !cached {
		battlereportUpdateCacheMut.Lock()
		battlereportUpdateCache[key] = cache
		battlereportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battlereportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for battlereports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for battlereports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattlereportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battlereportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battlereports\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battlereportPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in battlereport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all battlereport")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Battlereport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no battlereports provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battlereportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battlereportUpsertCacheMut.RLock()
	cache, cached := battlereportUpsertCache[key]
	battlereportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battlereportColumns,
			battlereportColumnsWithDefault,
			battlereportColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			battlereportColumns,
			battlereportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert battlereports, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battlereportPrimaryKeyColumns))
			copy(conflict, battlereportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battlereports\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battlereportType, battlereportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battlereportType, battlereportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert battlereports")
	}

	if !cached {
		battlereportUpsertCacheMut.Lock()
		battlereportUpsertCache[key] = cache
		battlereportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Battlereport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Battlereport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Battlereport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battlereportPrimaryKeyMapping)
	sql := "DELETE FROM \"battlereports\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from battlereports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for battlereports")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battlereportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no battlereportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from battlereports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for battlereports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattlereportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Battlereport slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(battlereportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battlereportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battlereports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battlereportPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from battlereport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for battlereports")
	}

	if len(battlereportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Battlereport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBattlereport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattlereportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattlereportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battlereportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battlereports\".* FROM \"battlereports\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battlereportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BattlereportSlice")
	}

	*o = slice

	return nil
}

// BattlereportExists checks if the Battlereport row exists.
func BattlereportExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battlereports\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if battlereports exists")
	}

	return exists, nil
}
