// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ArmyList is an object representing the database table.
type ArmyList struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ListName  null.String `boil:"list_name" json:"list_name,omitempty" toml:"list_name" yaml:"list_name,omitempty"`
	Faction   null.String `boil:"faction" json:"faction,omitempty" toml:"faction" yaml:"faction,omitempty"`
	List      null.String `boil:"list" json:"list,omitempty" toml:"list" yaml:"list,omitempty"`
	UserID    null.String `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *armyListR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L armyListL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ArmyListColumns = struct {
	ID        string
	ListName  string
	Faction   string
	List      string
	UserID    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	ListName:  "list_name",
	Faction:   "faction",
	List:      "list",
	UserID:    "user_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ArmyListWhere = struct {
	ID        whereHelperint
	ListName  whereHelpernull_String
	Faction   whereHelpernull_String
	List      whereHelpernull_String
	UserID    whereHelpernull_String
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: `id`},
	ListName:  whereHelpernull_String{field: `list_name`},
	Faction:   whereHelpernull_String{field: `faction`},
	List:      whereHelpernull_String{field: `list`},
	UserID:    whereHelpernull_String{field: `user_id`},
	CreatedAt: whereHelpertime_Time{field: `created_at`},
	UpdatedAt: whereHelpertime_Time{field: `updated_at`},
}

// ArmyListRels is where relationship names are stored.
var ArmyListRels = struct {
	ListBattlereports string
}{
	ListBattlereports: "ListBattlereports",
}

// armyListR is where relationships are stored.
type armyListR struct {
	ListBattlereports BattlereportSlice
}

// NewStruct creates a new relationship struct
func (*armyListR) NewStruct() *armyListR {
	return &armyListR{}
}

// armyListL is where Load methods for each relationship are stored.
type armyListL struct{}

var (
	armyListColumns               = []string{"id", "list_name", "faction", "list", "user_id", "created_at", "updated_at"}
	armyListColumnsWithoutDefault = []string{"list_name", "faction", "list", "user_id", "created_at", "updated_at"}
	armyListColumnsWithDefault    = []string{"id"}
	armyListPrimaryKeyColumns     = []string{"id"}
)

type (
	// ArmyListSlice is an alias for a slice of pointers to ArmyList.
	// This should generally be used opposed to []ArmyList.
	ArmyListSlice []*ArmyList
	// ArmyListHook is the signature for custom ArmyList hook methods
	ArmyListHook func(context.Context, boil.ContextExecutor, *ArmyList) error

	armyListQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	armyListType                 = reflect.TypeOf(&ArmyList{})
	armyListMapping              = queries.MakeStructMapping(armyListType)
	armyListPrimaryKeyMapping, _ = queries.BindMapping(armyListType, armyListMapping, armyListPrimaryKeyColumns)
	armyListInsertCacheMut       sync.RWMutex
	armyListInsertCache          = make(map[string]insertCache)
	armyListUpdateCacheMut       sync.RWMutex
	armyListUpdateCache          = make(map[string]updateCache)
	armyListUpsertCacheMut       sync.RWMutex
	armyListUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var armyListBeforeInsertHooks []ArmyListHook
var armyListBeforeUpdateHooks []ArmyListHook
var armyListBeforeDeleteHooks []ArmyListHook
var armyListBeforeUpsertHooks []ArmyListHook

var armyListAfterInsertHooks []ArmyListHook
var armyListAfterSelectHooks []ArmyListHook
var armyListAfterUpdateHooks []ArmyListHook
var armyListAfterDeleteHooks []ArmyListHook
var armyListAfterUpsertHooks []ArmyListHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ArmyList) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range armyListBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ArmyList) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range armyListBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ArmyList) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range armyListBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ArmyList) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range armyListBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ArmyList) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range armyListAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ArmyList) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range armyListAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ArmyList) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range armyListAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ArmyList) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range armyListAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ArmyList) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range armyListAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddArmyListHook registers your hook function for all future operations.
func AddArmyListHook(hookPoint boil.HookPoint, armyListHook ArmyListHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		armyListBeforeInsertHooks = append(armyListBeforeInsertHooks, armyListHook)
	case boil.BeforeUpdateHook:
		armyListBeforeUpdateHooks = append(armyListBeforeUpdateHooks, armyListHook)
	case boil.BeforeDeleteHook:
		armyListBeforeDeleteHooks = append(armyListBeforeDeleteHooks, armyListHook)
	case boil.BeforeUpsertHook:
		armyListBeforeUpsertHooks = append(armyListBeforeUpsertHooks, armyListHook)
	case boil.AfterInsertHook:
		armyListAfterInsertHooks = append(armyListAfterInsertHooks, armyListHook)
	case boil.AfterSelectHook:
		armyListAfterSelectHooks = append(armyListAfterSelectHooks, armyListHook)
	case boil.AfterUpdateHook:
		armyListAfterUpdateHooks = append(armyListAfterUpdateHooks, armyListHook)
	case boil.AfterDeleteHook:
		armyListAfterDeleteHooks = append(armyListAfterDeleteHooks, armyListHook)
	case boil.AfterUpsertHook:
		armyListAfterUpsertHooks = append(armyListAfterUpsertHooks, armyListHook)
	}
}

// One returns a single armyList record from the query.
func (q armyListQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ArmyList, error) {
	o := &ArmyList{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for army_lists")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ArmyList records from the query.
func (q armyListQuery) All(ctx context.Context, exec boil.ContextExecutor) (ArmyListSlice, error) {
	var o []*ArmyList

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ArmyList slice")
	}

	if len(armyListAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ArmyList records in the query.
func (q armyListQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count army_lists rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q armyListQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if army_lists exists")
	}

	return count > 0, nil
}

// ListBattlereports retrieves all the battlereport's Battlereports with an executor via list_id column.
func (o *ArmyList) ListBattlereports(mods ...qm.QueryMod) battlereportQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battlereports\".\"list_id\"=?", o.ID),
	)

	query := Battlereports(queryMods...)
	queries.SetFrom(query.Query, "\"battlereports\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battlereports\".*"})
	}

	return query
}

// LoadListBattlereports allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (armyListL) LoadListBattlereports(ctx context.Context, e boil.ContextExecutor, singular bool, maybeArmyList interface{}, mods queries.Applicator) error {
	var slice []*ArmyList
	var object *ArmyList

	if singular {
		object = maybeArmyList.(*ArmyList)
	} else {
		slice = *maybeArmyList.(*[]*ArmyList)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &armyListR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &armyListR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`battlereports`), qm.WhereIn(`list_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battlereports")
	}

	var resultSlice []*Battlereport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battlereports")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battlereports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battlereports")
	}

	if len(battlereportAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ListBattlereports = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battlereportR{}
			}
			foreign.R.List = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ListID) {
				local.R.ListBattlereports = append(local.R.ListBattlereports, foreign)
				if foreign.R == nil {
					foreign.R = &battlereportR{}
				}
				foreign.R.List = local
				break
			}
		}
	}

	return nil
}

// AddListBattlereports adds the given related objects to the existing relationships
// of the army_list, optionally inserting them as new records.
// Appends related to o.R.ListBattlereports.
// Sets related.R.List appropriately.
func (o *ArmyList) AddListBattlereports(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Battlereport) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ListID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battlereports\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"list_id"}),
				strmangle.WhereClause("\"", "\"", 2, battlereportPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ListID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &armyListR{
			ListBattlereports: related,
		}
	} else {
		o.R.ListBattlereports = append(o.R.ListBattlereports, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battlereportR{
				List: o,
			}
		} else {
			rel.R.List = o
		}
	}
	return nil
}

// SetListBattlereports removes all previously related items of the
// army_list replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.List's ListBattlereports accordingly.
// Replaces o.R.ListBattlereports with related.
// Sets related.R.List's ListBattlereports accordingly.
func (o *ArmyList) SetListBattlereports(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Battlereport) error {
	query := "update \"battlereports\" set \"list_id\" = null where \"list_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ListBattlereports {
			queries.SetScanner(&rel.ListID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.List = nil
		}

		o.R.ListBattlereports = nil
	}
	return o.AddListBattlereports(ctx, exec, insert, related...)
}

// RemoveListBattlereports relationships from objects passed in.
// Removes related items from R.ListBattlereports (uses pointer comparison, removal does not keep order)
// Sets related.R.List.
func (o *ArmyList) RemoveListBattlereports(ctx context.Context, exec boil.ContextExecutor, related ...*Battlereport) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ListID, nil)
		if rel.R != nil {
			rel.R.List = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("list_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ListBattlereports {
			if rel != ri {
				continue
			}

			ln := len(o.R.ListBattlereports)
			if ln > 1 && i < ln-1 {
				o.R.ListBattlereports[i] = o.R.ListBattlereports[ln-1]
			}
			o.R.ListBattlereports = o.R.ListBattlereports[:ln-1]
			break
		}
	}

	return nil
}

// ArmyLists retrieves all the records using an executor.
func ArmyLists(mods ...qm.QueryMod) armyListQuery {
	mods = append(mods, qm.From("\"army_lists\""))
	return armyListQuery{NewQuery(mods...)}
}

// FindArmyList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindArmyList(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ArmyList, error) {
	armyListObj := &ArmyList{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"army_lists\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, armyListObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from army_lists")
	}

	return armyListObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ArmyList) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no army_lists provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(armyListColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	armyListInsertCacheMut.RLock()
	cache, cached := armyListInsertCache[key]
	armyListInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			armyListColumns,
			armyListColumnsWithDefault,
			armyListColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(armyListType, armyListMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(armyListType, armyListMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"army_lists\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"army_lists\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into army_lists")
	}

	if !cached {
		armyListInsertCacheMut.Lock()
		armyListInsertCache[key] = cache
		armyListInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ArmyList.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ArmyList) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	armyListUpdateCacheMut.RLock()
	cache, cached := armyListUpdateCache[key]
	armyListUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			armyListColumns,
			armyListPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update army_lists, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"army_lists\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, armyListPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(armyListType, armyListMapping, append(wl, armyListPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update army_lists row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for army_lists")
	}

	if !cached {
		armyListUpdateCacheMut.Lock()
		armyListUpdateCache[key] = cache
		armyListUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q armyListQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for army_lists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for army_lists")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ArmyListSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), armyListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"army_lists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, armyListPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in armyList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all armyList")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ArmyList) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no army_lists provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(armyListColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	armyListUpsertCacheMut.RLock()
	cache, cached := armyListUpsertCache[key]
	armyListUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			armyListColumns,
			armyListColumnsWithDefault,
			armyListColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			armyListColumns,
			armyListPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert army_lists, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(armyListPrimaryKeyColumns))
			copy(conflict, armyListPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"army_lists\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(armyListType, armyListMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(armyListType, armyListMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert army_lists")
	}

	if !cached {
		armyListUpsertCacheMut.Lock()
		armyListUpsertCache[key] = cache
		armyListUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ArmyList record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ArmyList) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ArmyList provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), armyListPrimaryKeyMapping)
	sql := "DELETE FROM \"army_lists\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from army_lists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for army_lists")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q armyListQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no armyListQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from army_lists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for army_lists")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ArmyListSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ArmyList slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(armyListBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), armyListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"army_lists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, armyListPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from armyList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for army_lists")
	}

	if len(armyListAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ArmyList) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindArmyList(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ArmyListSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ArmyListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), armyListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"army_lists\".* FROM \"army_lists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, armyListPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ArmyListSlice")
	}

	*o = slice

	return nil
}

// ArmyListExists checks if the ArmyList row exists.
func ArmyListExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"army_lists\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if army_lists exists")
	}

	return exists, nil
}
