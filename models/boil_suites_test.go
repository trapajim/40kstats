// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("ArmyLists", testArmyLists)
	t.Run("Battlereports", testBattlereports)
	t.Run("GorpMigrations", testGorpMigrations)
}

func TestDelete(t *testing.T) {
	t.Run("ArmyLists", testArmyListsDelete)
	t.Run("Battlereports", testBattlereportsDelete)
	t.Run("GorpMigrations", testGorpMigrationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("ArmyLists", testArmyListsQueryDeleteAll)
	t.Run("Battlereports", testBattlereportsQueryDeleteAll)
	t.Run("GorpMigrations", testGorpMigrationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("ArmyLists", testArmyListsSliceDeleteAll)
	t.Run("Battlereports", testBattlereportsSliceDeleteAll)
	t.Run("GorpMigrations", testGorpMigrationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("ArmyLists", testArmyListsExists)
	t.Run("Battlereports", testBattlereportsExists)
	t.Run("GorpMigrations", testGorpMigrationsExists)
}

func TestFind(t *testing.T) {
	t.Run("ArmyLists", testArmyListsFind)
	t.Run("Battlereports", testBattlereportsFind)
	t.Run("GorpMigrations", testGorpMigrationsFind)
}

func TestBind(t *testing.T) {
	t.Run("ArmyLists", testArmyListsBind)
	t.Run("Battlereports", testBattlereportsBind)
	t.Run("GorpMigrations", testGorpMigrationsBind)
}

func TestOne(t *testing.T) {
	t.Run("ArmyLists", testArmyListsOne)
	t.Run("Battlereports", testBattlereportsOne)
	t.Run("GorpMigrations", testGorpMigrationsOne)
}

func TestAll(t *testing.T) {
	t.Run("ArmyLists", testArmyListsAll)
	t.Run("Battlereports", testBattlereportsAll)
	t.Run("GorpMigrations", testGorpMigrationsAll)
}

func TestCount(t *testing.T) {
	t.Run("ArmyLists", testArmyListsCount)
	t.Run("Battlereports", testBattlereportsCount)
	t.Run("GorpMigrations", testGorpMigrationsCount)
}

func TestHooks(t *testing.T) {
	t.Run("ArmyLists", testArmyListsHooks)
	t.Run("Battlereports", testBattlereportsHooks)
	t.Run("GorpMigrations", testGorpMigrationsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("ArmyLists", testArmyListsInsert)
	t.Run("ArmyLists", testArmyListsInsertWhitelist)
	t.Run("Battlereports", testBattlereportsInsert)
	t.Run("Battlereports", testBattlereportsInsertWhitelist)
	t.Run("GorpMigrations", testGorpMigrationsInsert)
	t.Run("GorpMigrations", testGorpMigrationsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BattlereportToArmyListUsingList", testBattlereportToOneArmyListUsingList)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ArmyListToListBattlereports", testArmyListToManyListBattlereports)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BattlereportToArmyListUsingListBattlereports", testBattlereportToOneSetOpArmyListUsingList)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("BattlereportToArmyListUsingListBattlereports", testBattlereportToOneRemoveOpArmyListUsingList)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ArmyListToListBattlereports", testArmyListToManyAddOpListBattlereports)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ArmyListToListBattlereports", testArmyListToManySetOpListBattlereports)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ArmyListToListBattlereports", testArmyListToManyRemoveOpListBattlereports)
}

func TestReload(t *testing.T) {
	t.Run("ArmyLists", testArmyListsReload)
	t.Run("Battlereports", testBattlereportsReload)
	t.Run("GorpMigrations", testGorpMigrationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("ArmyLists", testArmyListsReloadAll)
	t.Run("Battlereports", testBattlereportsReloadAll)
	t.Run("GorpMigrations", testGorpMigrationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("ArmyLists", testArmyListsSelect)
	t.Run("Battlereports", testBattlereportsSelect)
	t.Run("GorpMigrations", testGorpMigrationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("ArmyLists", testArmyListsUpdate)
	t.Run("Battlereports", testBattlereportsUpdate)
	t.Run("GorpMigrations", testGorpMigrationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("ArmyLists", testArmyListsSliceUpdateAll)
	t.Run("Battlereports", testBattlereportsSliceUpdateAll)
	t.Run("GorpMigrations", testGorpMigrationsSliceUpdateAll)
}
